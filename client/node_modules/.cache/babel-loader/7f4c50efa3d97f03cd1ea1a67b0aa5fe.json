{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diego\\\\Downloads\\\\UJGH-App\\\\client\\\\src\\\\components\\\\proyect\\\\list.js\";\nimport React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport Moment from 'react-moment';\nimport { proyect } from '../../services/proyect';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { TableHead } from '@material-ui/core';\nimport TablePaginationActions from './pagination';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Alert from '../layout/alert';\n\nconst useStyles2 = theme => ({\n  root: {\n    width: '100%',\n    marginTop: 0\n  },\n  table: {\n    minWidth: 500\n  },\n  tableWrapper: {\n    overflowX: 'auto'\n  },\n  header: {\n    fontWeight: 'bold'\n  }\n});\n\nclass ListTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangePage = (event, newPage) => {\n      this.setPage(newPage);\n    };\n\n    this.handleChangeRowsPerPage = event => {\n      this.setRowsPerPage(parseInt(event.target.value, 10));\n      this.setPage(0);\n    };\n\n    this.state = {\n      page: 0,\n      rowsPerPage: 5,\n      rows: [],\n      numeration: [],\n      updateProyect: 0,\n      alert: {\n        open: false,\n        message: \"\",\n        status: 'success'\n      }\n    };\n  }\n\n  handleClose() {\n    this.setState(state => state.alert.open = false);\n  }\n\n  async getData() {\n    const getProyect = await proyect.listProyects();\n    const rows = getProyect.data.rows.sort((a, b) => a.id < b.id ? -1 : 1);\n    const count = getProyect.data.count;\n    if (count < 5) return this.setState({\n      rows,\n      rowsPerPage: count,\n      numeration: [count, 5, 10, 25, {\n        label: 'Todo',\n        value: -1\n      }]\n    });\n    this.setState({\n      rows,\n      numeration: [5, 10, 25, {\n        label: 'Todo',\n        value: -1\n      }]\n    });\n  }\n\n  async componentDidMount() {\n    this.getData();\n  }\n\n  setPage(page) {\n    this.setState({\n      page\n    });\n  }\n\n  setRowsPerPage(rowsPerPage) {\n    this.setState({\n      rowsPerPage\n    });\n  }\n\n  async delete(file) {\n    await proyect.drop(file.id);\n    let _this$state$alert = this.state.alert,\n        message = _this$state$alert.message,\n        status = _this$state$alert.status,\n        open = _this$state$alert.open;\n    message = \"Proyecto eliminado\";\n    status = \"success\";\n    open = true;\n    this.setState({\n      alert: {\n        open,\n        status,\n        message\n      }\n    });\n    this.getData();\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.updateProyect !== this.state.updateProyect) {\n      this.setState({\n        updateProyect: props.updateProyect\n      });\n      this.getData();\n    }\n  }\n\n  async download(file) {\n    const response = await proyect.download(file);\n    let _this$state$alert2 = this.state.alert,\n        message = _this$state$alert2.message,\n        status = _this$state$alert2.status,\n        open = _this$state$alert2.open;\n    message = \"Proyecto descargado\";\n    status = \"success\";\n    open = true;\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', file.name);\n    document.body.appendChild(link);\n    link.click();\n    this.setState({\n      alert: {\n        open,\n        status,\n        message\n      }\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          page = _this$state.page,\n          rowsPerPage = _this$state.rowsPerPage,\n          rows = _this$state.rows,\n          numeration = _this$state.numeration,\n          alert = _this$state.alert;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n    return React.createElement(Paper, {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.tableWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Table, {\n      className: classes.table,\n      \"aria-label\": \"custom pagination table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      className: classes.header,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Nombre del Archivo\"), React.createElement(TableCell, {\n      className: classes.header,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Fecha de Creaci\\xF3n\"), React.createElement(TableCell, {\n      className: classes.header,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Fecha de \\xFAltima Actualizaci\\xF3n\"), React.createElement(TableCell, {\n      className: classes.header,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Opciones\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, rows.length ? (rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows).map(row => React.createElement(TableRow, {\n      key: row.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, row.name), React.createElement(TableCell, {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Moment, {\n      format: \"DD/MM/YYYY\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, row.createdAt)), React.createElement(TableCell, {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Moment, {\n      format: \"DD/MM/YYYY\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, row.updatedAt)), React.createElement(TableCell, {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      title: \"Descargar\",\n      \"aria-label\": \"Descargar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(GetAppIcon, {\n      onClick: () => this.download(row),\n      color: \"secondary\",\n      style: {\n        marginTop: 3,\n        marginRight: 15,\n        cursor: 'pointer'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(Tooltip, {\n      title: \"Eliminar\",\n      \"aria-label\": \"Eliminar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      style: {\n        cursor: 'pointer'\n      },\n      onClick: () => this.delete(row),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))))) : React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      align: \"center\",\n      colSpan: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"No tienes proyectos\")), emptyRows > 0 && React.createElement(TableRow, {\n      style: {\n        height: 53 * emptyRows\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      colSpan: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }))), React.createElement(TableFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(TablePagination, {\n      labelDisplayedRows: ({\n        from,\n        to,\n        count\n      }) => \"\".concat(from, \"-\").concat(to === -1 ? count : to, \" de \").concat(count),\n      labelRowsPerPage: \"Proyectos por pagina\",\n      rowsPerPageOptions: numeration,\n      colSpan: 3,\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      SelectProps: {\n        inputProps: {\n          'aria-label': 'Proyectos por pagina'\n        },\n        native: false\n      },\n      onChangePage: this.handleChangePage.bind(this),\n      onChangeRowsPerPage: this.handleChangeRowsPerPage.bind(this),\n      ActionsComponent: TablePaginationActions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))))), React.createElement(Alert, {\n      open: alert.open,\n      message: alert.message,\n      status: alert.status,\n      handleClose: this.handleClose.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withStyles(useStyles2, {\n  withTheme: true\n})(ListTable); // export default function CustomPaginationActionsTable() {\n//     const classes = useStyles2();\n//     const [page, setPage] = React.useState(0);\n//     const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n//     const handleChangePage = (event, newPage) => {\n//         console.log(newPage, 'newPage')\n//         setPage(newPage);\n//     };\n//     const handleChangeRowsPerPage = event => {\n//         setRowsPerPage(parseInt(event.target.value, 10));\n//         setPage(0);\n//     };\n//     return (\n//         <Paper className={classes.root}>\n//             <div className={classes.tableWrapper}>\n//                 <Table className={classes.table} aria-label=\"custom pagination table\">\n//                     <TableHead>\n//                         <TableRow>\n//                             <TableCell align=\"left\">Calories</TableCell>\n//                             <TableCell align=\"left\">Fat&nbsp;(g)</TableCell>\n//                             <TableCell align=\"left\">Carbs&nbsp;(g)</TableCell>\n//                         </TableRow>\n//                     </TableHead>\n//                     <TableBody>\n//                         {(rowsPerPage > 0\n//                             ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                             : rows\n//                         ).map(row => (\n//                             <TableRow key={row.name}>\n//                                 <TableCell component=\"th\" scope=\"row\">\n//                                     {row.name}\n//                                 </TableCell>\n//                                 <TableCell align=\"left\">{row.calories}</TableCell>\n//                                 <TableCell align=\"left\">{row.fat}</TableCell>\n//                             </TableRow>\n//                         ))}\n//                         {emptyRows > 0 && (\n//                             <TableRow style={{ height: 53 * emptyRows }}>\n//                                 <TableCell colSpan={6} />\n//                             </TableRow>\n//                         )}\n//                     </TableBody>\n//                     <TableFooter>\n//                         <TableRow>\n//                             <TablePagination\n//                                 labelDisplayedRows={({ from, to, count }) => `${from}-${to === -1 ? count : to} de ${count}`}\n//                                 labelRowsPerPage=\"Proyectos por pagina\"\n//                                 rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n//                                 colSpan={3}\n//                                 count={rows.length}\n//                                 rowsPerPage={rowsPerPage}\n//                                 page={page}\n//                                 SelectProps={{\n//                                     inputProps: { 'aria-label': 'Proyectos por pagina' },\n//                                     native: false,\n//                                 }}\n//                                 onChangePage={handleChangePage}\n//                                 onChangeRowsPerPage={handleChangeRowsPerPage}\n//                                 ActionsComponent={TablePaginationActions}\n//                             />\n//                         </TableRow>\n//                     </TableFooter>\n//                 </Table>\n//             </div>\n//         </Paper>\n//     );\n// }","map":{"version":3,"sources":["C:/Users/Diego/Downloads/UJGH-App/client/src/components/proyect/list.js"],"names":["React","Component","Table","TableBody","TableCell","TableFooter","TablePagination","TableRow","Paper","withStyles","Moment","proyect","Tooltip","TableHead","TablePaginationActions","GetAppIcon","DeleteIcon","Alert","useStyles2","theme","root","width","marginTop","table","minWidth","tableWrapper","overflowX","header","fontWeight","ListTable","constructor","props","handleChangePage","event","newPage","setPage","handleChangeRowsPerPage","setRowsPerPage","parseInt","target","value","state","page","rowsPerPage","rows","numeration","updateProyect","alert","open","message","status","handleClose","setState","getData","getProyect","listProyects","data","sort","a","b","id","count","label","componentDidMount","delete","file","drop","componentWillReceiveProps","download","response","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","name","body","appendChild","click","render","classes","emptyRows","Math","min","length","slice","map","row","createdAt","updatedAt","marginRight","cursor","height","from","to","inputProps","native","bind","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Moment from 'react-moment';\r\nimport { proyect } from '../../services/proyect'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { TableHead } from '@material-ui/core';\r\nimport TablePaginationActions from './pagination'\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Alert from '../layout/alert'\r\n\r\nconst useStyles2 = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: 0,\r\n    },\r\n    table: {\r\n        minWidth: 500,\r\n    },\r\n    tableWrapper: {\r\n        overflowX: 'auto',\r\n    },\r\n    header: {\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\n\r\nclass ListTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            rowsPerPage: 5,\r\n            rows: [],\r\n            numeration: [],\r\n            updateProyect: 0,\r\n            alert: {\r\n                open: false,\r\n                message: \"\",\r\n                status: 'success'\r\n            }\r\n        }\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState(state => state.alert.open = false)\r\n    }\r\n\r\n    async getData() {\r\n        const getProyect = await proyect.listProyects();\r\n        const rows = getProyect.data.rows.sort((a, b) => (a.id < b.id ? -1 : 1))\r\n        const count = getProyect.data.count;\r\n        if (count < 5) return this.setState({ rows, rowsPerPage: count, numeration: [count, 5, 10, 25, { label: 'Todo', value: -1 }] })\r\n        this.setState({ rows, numeration: [5, 10, 25, { label: 'Todo', value: -1 }] })\r\n    }\r\n    async componentDidMount() {\r\n        this.getData()\r\n    }\r\n    setPage(page) {\r\n        this.setState({ page })\r\n    }\r\n    handleChangePage = (event, newPage) => {\r\n        this.setPage(newPage);\r\n    };\r\n\r\n    setRowsPerPage(rowsPerPage) {\r\n        this.setState({ rowsPerPage })\r\n    }\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setRowsPerPage(parseInt(event.target.value, 10));\r\n        this.setPage(0);\r\n    };\r\n    async delete(file) {\r\n        await proyect.drop(file.id);\r\n        let { message, status, open } = this.state.alert;\r\n        message = \"Proyecto eliminado\"\r\n        status = \"success\"\r\n        open = true\r\n        this.setState({ alert: { open, status, message } })\r\n        this.getData()\r\n    }\r\n    componentWillReceiveProps(props) {\r\n        if (props.updateProyect !== this.state.updateProyect) {\r\n            this.setState({ updateProyect: props.updateProyect })\r\n            this.getData();\r\n        }\r\n    }\r\n\r\n    async download(file) {\r\n        const response = await proyect.download(file);\r\n        let { message, status, open } = this.state.alert;\r\n        message = \"Proyecto descargado\"\r\n        status = \"success\"\r\n        open = true\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', file.name);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        this.setState({ alert: { open, status, message } })\r\n    }\r\n    render() {\r\n        const { classes } = this.props\r\n        const { page, rowsPerPage, rows, numeration, alert } = this.state\r\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <div className={classes.tableWrapper}>\r\n                    <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.header} align=\"center\">Nombre del Archivo</TableCell>\r\n                                <TableCell className={classes.header} align=\"center\">Fecha de Creación</TableCell>\r\n                                <TableCell className={classes.header} align=\"center\">Fecha de última Actualización</TableCell>\r\n                                <TableCell className={classes.header} align=\"center\">Opciones</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.length ? (\r\n                                (rowsPerPage > 0\r\n                                    ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    : rows\r\n                                ).map(row => (\r\n                                    <TableRow key={row.name}>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.name}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\"><Moment format=\"DD/MM/YYYY\">{row.createdAt}</Moment></TableCell>\r\n                                        <TableCell align=\"center\"><Moment format=\"DD/MM/YYYY\">{row.updatedAt}</Moment></TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Tooltip title=\"Descargar\" aria-label={`Descargar`}>\r\n                                                <GetAppIcon onClick={() => this.download(row)} color=\"secondary\" style={{ marginTop: 3, marginRight: 15, cursor: 'pointer' }} />\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Eliminar\" aria-label={`Eliminar`}>\r\n                                                <DeleteIcon style={{ cursor: 'pointer' }} onClick={() => this.delete(row)} />\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))\r\n                            ) : (\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" colSpan={4}>\r\n                                            No tienes proyectos\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )}\r\n\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: 53 * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                        <TableFooter>\r\n                            <TableRow>\r\n                                <TablePagination\r\n                                    labelDisplayedRows={({ from, to, count }) => `${from}-${to === -1 ? count : to} de ${count}`}\r\n                                    labelRowsPerPage=\"Proyectos por pagina\"\r\n                                    rowsPerPageOptions={numeration}\r\n                                    colSpan={3}\r\n                                    count={rows.length}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    SelectProps={{\r\n                                        inputProps: { 'aria-label': 'Proyectos por pagina' },\r\n                                        native: false,\r\n                                    }}\r\n                                    onChangePage={this.handleChangePage.bind(this)}\r\n                                    onChangeRowsPerPage={this.handleChangeRowsPerPage.bind(this)}\r\n                                    ActionsComponent={TablePaginationActions}\r\n                                />\r\n                            </TableRow>\r\n                        </TableFooter>\r\n                    </Table>\r\n                </div>\r\n                <Alert open={alert.open} message={alert.message} status={alert.status} handleClose={this.handleClose.bind(this)} />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles2, { withTheme: true })(ListTable);\r\n\r\n// export default function CustomPaginationActionsTable() {\r\n//     const classes = useStyles2();\r\n//     const [page, setPage] = React.useState(0);\r\n//     const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n//     const handleChangePage = (event, newPage) => {\r\n//         console.log(newPage, 'newPage')\r\n//         setPage(newPage);\r\n//     };\r\n\r\n//     const handleChangeRowsPerPage = event => {\r\n//         setRowsPerPage(parseInt(event.target.value, 10));\r\n//         setPage(0);\r\n//     };\r\n\r\n//     return (\r\n//         <Paper className={classes.root}>\r\n//             <div className={classes.tableWrapper}>\r\n//                 <Table className={classes.table} aria-label=\"custom pagination table\">\r\n//                     <TableHead>\r\n//                         <TableRow>\r\n//                             <TableCell align=\"left\">Calories</TableCell>\r\n//                             <TableCell align=\"left\">Fat&nbsp;(g)</TableCell>\r\n//                             <TableCell align=\"left\">Carbs&nbsp;(g)</TableCell>\r\n//                         </TableRow>\r\n//                     </TableHead>\r\n//                     <TableBody>\r\n//                         {(rowsPerPage > 0\r\n//                             ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n//                             : rows\r\n//                         ).map(row => (\r\n//                             <TableRow key={row.name}>\r\n//                                 <TableCell component=\"th\" scope=\"row\">\r\n//                                     {row.name}\r\n//                                 </TableCell>\r\n//                                 <TableCell align=\"left\">{row.calories}</TableCell>\r\n//                                 <TableCell align=\"left\">{row.fat}</TableCell>\r\n//                             </TableRow>\r\n//                         ))}\r\n\r\n//                         {emptyRows > 0 && (\r\n//                             <TableRow style={{ height: 53 * emptyRows }}>\r\n//                                 <TableCell colSpan={6} />\r\n//                             </TableRow>\r\n//                         )}\r\n//                     </TableBody>\r\n//                     <TableFooter>\r\n//                         <TableRow>\r\n//                             <TablePagination\r\n//                                 labelDisplayedRows={({ from, to, count }) => `${from}-${to === -1 ? count : to} de ${count}`}\r\n//                                 labelRowsPerPage=\"Proyectos por pagina\"\r\n//                                 rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n//                                 colSpan={3}\r\n//                                 count={rows.length}\r\n//                                 rowsPerPage={rowsPerPage}\r\n//                                 page={page}\r\n//                                 SelectProps={{\r\n//                                     inputProps: { 'aria-label': 'Proyectos por pagina' },\r\n//                                     native: false,\r\n//                                 }}\r\n//                                 onChangePage={handleChangePage}\r\n//                                 onChangeRowsPerPage={handleChangeRowsPerPage}\r\n//                                 ActionsComponent={TablePaginationActions}\r\n//                             />\r\n//                         </TableRow>\r\n//                     </TableFooter>\r\n//                 </Table>\r\n//             </div>\r\n//         </Paper>\r\n//     );\r\n// }"]},"metadata":{},"sourceType":"module"}